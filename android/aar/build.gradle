plugins {
    id "com.google.protobuf" version "0.8.14"
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven'
    id 'signing'
}

ext {
    artifactId = "idpass-lite-java-android"
    groupId = "org.idpass"
    version = '0.1'
    description = "ID PASS Lite (Java) Android is a wrapper API of libidpasslite.so"
}

group project.ext.groupId
version = project.ext.version

if (System.getenv('SONATYPE_USERNAME') != null) {
    project.ext['ossrhUsername'] = System.getenv('SONATYPE_USERNAME')
    project.ext['ossrhPassword'] = System.getenv('SONATYPE_PASSWORD')
    project.ext['signing.secretKeyRingFile'] = System.getenv('GPG_KEYRING_FILE')
    project.ext['signing.keyId'] = System.getenv('GPG_KEY_ID')
    project.ext['signing.password'] =  System.getenv('GPG_KEY_PASSPHRASE')
}

signing {
    if (project.hasProperty('signing.keyId') &&
        project.hasProperty('signing.password') &&
        project.hasProperty('signing.secretKeyRingFile')) {
        sign configurations.archives
    }
}

android {
    compileSdkVersion 29
    ndkVersion "21.3.6528147"
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs = ['src/main/jniLibs']

        java {
            srcDir '../../src/main/java'
            exclude 'org/idpass/lite/IDPassLite.java'
            exclude 'org/idpass/lite/IDPassLoader.java'
        }
    }
	
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }

	libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.ext.artifactId}-${project.ext.version}.aar"
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'

    testImplementation 'junit:junit:4.12'

    // Needed by idpass-lite-java
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'
}

sourceSets{
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.12.3'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: project.getProperty('ossrhUsername'),
                         password: project.getProperty('ossrhPassword'))
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: project.getProperty('ossrhUsername'),
                         password: project.getProperty('ossrhPassword'))
        }
      }

      pom.project {
        name 'ID Pass Lite Android'
        packaging 'aar'
        // optionally artifactId can be defined here
        artifactId project.ext.artifactId
        description 'ID PASS Lite (Android) is a wrapper API of libidpasslite.so'
        url 'https://github.com/idpass/idpass-lite-java'

        scm {
          connection 'scm:git:git://github.com/idpass/idpass-lite-java.git'
          developerConnection 'scm:git:ssh://github.com:idpass/idpass-lite-java.git'
          url 'https://github.com/idpass/idpass-lite-java/tree/master'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'jeremi'
            name 'Jeremi Joslin'
            email 'jeremi@newlogic.com'
          }
          developer {
            id 'typelogic'
            name 'Dexter Aparicio'
            email 'dexter@newlogic.com'
          }
        }
      }
    }
  }
}
