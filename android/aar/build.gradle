plugins {
    id "com.google.protobuf" version "0.8.14"
    id 'com.android.library'
    id 'kotlin-android'
}

ext {
    artifactId = "idpass-lite-java-android"
    groupId = "org.idpass"
    version = '0.1'
    description = "ID PASS Lite (Java) Android is a wrapper API of libidpasslite.so"
}

android {
    compileSdkVersion 29
    ndkVersion "21.3.6528147"
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs = ['src/main/jniLibs']

        java {
            srcDir '../../src/main/java'
            srcDir 'aar/src/main/java'
        }
    }

	libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.ext.artifactId}-${project.ext.version}.aar"
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'

    testImplementation 'junit:junit:4.12'

    // Needed by idpass-lite-java
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'
}

sourceSets{
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.12.3'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}
